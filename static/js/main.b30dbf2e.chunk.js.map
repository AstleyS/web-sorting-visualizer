{"version":3,"sources":["algorithms/mergeSortAlgo.js","SortingVisualizer/SortingVisualizer.jsx","algorithms/bubbleSortAlgo.js","algorithms/selectionSortAlgo.js","App.js","reportWebVitals.js","index.js"],"names":["mergeSortAlgo","arr","length","mid","Math","floor","left","slice","right","i","j","sortedArray","push","SortingVisualizer","props","state","array","this","resetArray","min","max","random","setState","expectedSort","sort","a","b","realSort","bars","document","getElementsByClassName","len","style","height","bubbleSortAlgo","console","log","assertSorting","curr_i","index","min_n","Number","MAX_SAFE_INTEGER","indexOf","selectionSortAlgo","className","map","value","id","onClick","bubbleSort","selectionSort","mergeSort","React","Component","expected","real","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b30dbf2e.chunk.js","sourcesContent":["// Merge Sort\n// This algo sorts an array by dividing it in smaller arrays, sort them and lastly merge them\n// TC: O(nLog(n)) \nexport const mergeSortAlgo = arr => {\n\n    // This algo sorts an array by repeatedly swapping the adjacent element if it is in wrong order\n    //const bars = document.getElementsByClassName('array-bar');\n\n    if (arr.length === 1) {\n        return arr;\n    }\n    \n    let mid = Math.floor(arr.length / 2);\n\n    let left = mergeSortAlgo(arr.slice(0, mid));\n    let right = mergeSortAlgo(arr.slice(mid));\n\n    let i = 0;\n    let j = 0;\n\n    const sortedArray = [];\n\n    while(i < left.length && j < right.length) {\n        if (left[i] < right[j]) {\n            sortedArray.push(left[i++])\n        } else {\n            sortedArray.push(right[j++])\n        }\n    }\n\n    while (i < left.length) sortedArray.push(left[i++]);\n    while (j < right.length) sortedArray.push(right[j++]);\n\n    return sortedArray;\n\n}\n\n","import React from 'react';\nimport './SortingVisualizer.css';\nimport { bubbleSortAlgo } from '../algorithms/bubbleSortAlgo';\nimport { selectionSortAlgo } from '../algorithms/selectionSortAlgo';\nimport { mergeSortAlgo } from '../algorithms/mergeSortAlgo';\n\nexport default class SortingVisualizer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            // our main Array\n            array: []\n        }\n    }\n\n    componentDidMount() {\n        // when app restarts we reset the array and populate with different numbers\n        this.resetArray();\n    }\n\n    resetArray() {\n        const array = [];\n        for (let i = 0; i < 10; i++) {\n            // Push to array random values between  5 and 1000\n            array.push(randomIntFromInterval(5, 500));\n        }\n        this.setState({array});\n    }\n\n    bubbleSort() {\n        const expectedSort = this.state.array.slice().sort((a, b) => a - b);\n        const realSort = bubbleSortAlgo(this.state.array);\n        console.log(assertSorting(expectedSort, realSort)); \n        console.log({realSort})\n    }\n\n    selectionSort() {\n        const expectedSort = this.state.array.slice().sort((a, b) => a - b);\n        const realSort = selectionSortAlgo(this.state.array);\n        console.log(assertSorting(expectedSort, realSort)); \n        console.log({realSort})\n    }\n\n    mergeSort() {\n       const expectedSort = this.state.array.sort((a, b) => a - b);\n       const realSort = mergeSortAlgo(this.state.array);\n       console.log(assertSorting(expectedSort, realSort));\n       console.log({realSort})\n    }\n\n    // This function renders the array values\n    render() {\n        const {array} = this.state;\n\n        return (\n         // Map all the values of the array\n          <div className = 'bars-container'>\n              {\n                array.map((value, index) => {\n                    return <div style={{height: `${value}px`}} className=\"array-bar\" id={ index } key={ index }>\n                            </div>\n                })\n              }\n              <div className=\"buttons\">\n                <button onClick={() => this.resetArray()}>Generate new array</button>\n                <button onClick={() => this.bubbleSort()}>BubbleSort</button>\n                <button onClick={() => this.selectionSort()}>SelectionSort</button>\n                <button onClick={() => this.mergeSort()}>MergeSort</button>\n              </div>\n          </div>\n        )\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction assertSorting(expected, real) {\n    if (expected.length !== real.length) return false;\n    for (let i = 0; i < expected.length; i++) {\n        if (expected[i] !== real[i]) return false;\n    }\n    return true;\n}","// This algo sorts an array by repeatedly swapping the adjacent element if it is in wrong order\n// TC: O(n^2)\nexport const bubbleSortAlgo = arr => {\n\n    const bars = document.getElementsByClassName('array-bar');\n\n    let len = arr.length;\n\n    while (len >= 0) {\n        for (let i = 0; i < len - 1; i++) {\n            if (arr[i + 1] < arr[i]) {\n                [arr[i + 1], arr[i]] = [arr[i], arr[i + 1]];\n                [bars[i + 1].style.height, bars[i].style.height] = [bars[i].style.height, bars[i + 1].style.height]; \n            }  \n        }\n        len--;\n    }\n\n    return arr;\n}","// Selection Sort\n// This algo sorts an array by repeatedly placing the minimun element of the array in the beginning\n// TC: O(n^2)\nexport const selectionSortAlgo = arr => {\n\n    // This algo sorts an array by repeatedly swapping the adjacent element if it is in wrong order\n    const bars = document.getElementsByClassName('array-bar');\n\n    let curr_i = 0;\n\n    while (curr_i < arr.length) {\n        let min_n = Number.MAX_SAFE_INTEGER;\n        let index = 0; \n        for (let i = curr_i; i < arr.length; i++) {\n            min_n = Math.min(min_n, arr[i]);\n        }\n        index = arr.indexOf(min_n); \n        [arr[index], arr[curr_i]] = [arr[curr_i], arr[index]];\n        [bars[index].style.height, bars[curr_i].style.height] = [bars[curr_i].style.height, bars[index].style.height];\n        curr_i++;\n    }\n\n    return arr;\n}","import './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* This is our created component */}\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}